buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
plugins {
    id 'com.matthewprenger.cursegradle' version '1.2.0'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.0'

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

ext.mod_version="Test"
ext.type="test"

apply from: 'gradle/versioning.gradle'
apply from: 'gradle/artifacts.gradle'
apply from: 'gradle/maven.gradle'
apply from: 'gradle/curse.gradle'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: project.minecraft_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                wallets {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                wallets {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', "wallets", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                wallets {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    finalizedBy('reobfJar')

    includeEmptyDirs = false

    from sourceSets.main.output.classesDirs
    from sourceSets.main.output.resourcesDir

    manifest {
        attributes([
                "FMLAT": "accesstransformer.cfg",
                "Specification-Title": project.mod_id,
                "Specification-Vendor": "cheaterpaul",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${mod_version}",
                "Implementation-Vendor" :"cheaterpaul",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources {
    filesMatching("**/mods.toml") {
        expand 'version': project.mod_version
    }
}

//Replace strings in IDEA folders as well
def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = ['version': project.mod_version, 'mcversion': minecraft_version, 'forge_version': forge_version]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
    exclude '**/Thumbs.db'

}